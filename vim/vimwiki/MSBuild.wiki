= MSBuild =
Reference: https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-project-file-schema-reference?view=vs-2017

== Questions ==
* Why are there multiple groups of things like `ItemGroup`, `ItemDefinitionGroup`, and `Property`?
    Could be both stylistic or logical.  Grouping like functions together helps with organization.  Also, you might want to apply some conditional (or other attribute) to a particular items in one group, but not another.


== Properties ==
Properties are key/value pairs found like so:
    <PropertyGroup>
        <BuildDir>Build</BuildDir>
    </PropertyGroup>

They can also be conditional
    <PropertyGroup>
        <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    </PropertyGroup>

Use the keys to access the values like so:
    $(BuildDir)
    $(Configuration)

== Items ==
Items are inputs into the build system (typically represent files).  They're grouped into item types
based on user-defined item names.

The following creates item type name `Compile` which includes 2 files:
<ItemGroup>
    <Compile Include="file1.cs"/>
    <Compile Include="file2.cs"/>
</ItemGroup>

Item types can be referenced by using syntax `@(<ItemType>)`:
    @(Compile)

== Tasks ==
Tasks are units of executable code that MSBuild projects use to perform build operations.
MSBuild includes common tasks that can be modified to suit my needs (e.g. Copy, MakeDir)

Tasks are executed by creating an element that has name of the task as a child of a Target element.
Tasks typically accept parameters, which are passed as attributes of the element.
    <Target Name="MakeBuildDirectory">
        <MakeDir Directories="$(BuildDir)"/>
    </Target>

== Targets ==
Targets group tasks together in a particular order and expose sections of the project file as
entry points into the build process.


This has been a painful experience thus far.  The reference to $(VCTargetsPath) currently resolving to C:\ which is causing issues.
Posted a question on stack overflow to see how to proceed: https://stackoverflow.com/questions/53470698/building-vcxproj-from-scratch-vctargetspath-resolving-to-c

My way forward was to manually define $(VCTargetsPath) in my *.vcxproj file which points to my installation of Visual Studio 2017.
